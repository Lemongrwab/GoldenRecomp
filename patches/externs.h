#ifndef EXTERNS_H
#define EXTERNS_H

#include "patches.h"

u32 __osSetFpcCsr(u32);
void* setSPToEnd(u8* stack, u32 size);
void mainproc(void* args);
void osInitialize(void);
s32 boot_osPiRawStartDma(s32, u32, void*, u32);
void osCreateThread(OSThread*, OSId, void (*)(void*), void*, void*, OSPri);

s16 viGetViewLeft(void);
s16 viGetViewTop(void);
s16 viGetViewWidth(void);
s16 viGetViewTop(void);
s16 viGetViewHeight(void);

s16 viGetX(void);
s16 viGetY(void);

s32 get_cur_playernum(void);
s32 getPlayerCount(void);

u16 joyGetButtons(s8 contpadnum, u16 mask);
u16 joyGetButtonsPressedThisFrame(s8 contpadnum, u16 mask);

f32 bondviewGetPauseAnimationPercent(void);
u32 cur_player_get_screen_setting(void);
void currentPlayerSetScreenPosition(f32 left, f32 top);

s32 alCSPGetState(ALCSPlayer* seqp);
void musicTrack1Stop(void);
void musicTrack1ApplySeqpVol(u16 volume);
void romCopy(void* target, void* source, u32 size);
u32 decompressdata(u8* src, u8* dst, struct huft* hlist);
u16 musicTrack1GetVolume(void);
void musicTrack2ApplySeqpVol(u16 volume);
void musicTrack3ApplySeqpVol(u16 volume);
u16 musicTrack2GetVolume(void);
u16 musicTrack3GetVolume(void);
void alCSPPlay(ALCSPlayer* seqp);
void alCSPSetSeq(ALCSPlayer* seqp, ALCSeq* seq);
void musicTrack2Stop(void);
void musicTrack3Stop(void);
f32 get_room_data_float1(void);
struct CurrentEnvironmentRecord* fogGetCurrentEnvironmentp(void);
Gfx* viSetFillColor(Gfx* gdl, s32 r, s32 g, s32 b);
void sub_GAME_7F093880(f32 offset_x, f32 offset_y, coord3d* out);
f32 getPlayer_c_screenwidth(void);
s32 sub_GAME_7F0938FC(coord3d* arg0, coord3d* arg1, f32* arg2);
s32 sub_GAME_7F093A78(coord3d* arg0, coord3d* arg1, f32* arg2);
f32 getPlayer_c_screentop(void);
f32 getPlayer_c_screenheight(void);
s32 sub_GAME_7F0938FC(coord3d* arg0, coord3d* arg1, f32* arg2);
s32 sub_GAME_7F093BFC(coord3d* arg0, coord3d* arg1, f32* arg2);
f32 getPlayer_c_screentop(void);
f32 getPlayer_c_screenleft(void);
void sub_GAME_7F093FA4(SkyRelated18* arg0, f32 arg1);
void texSelect(Gfx** gdlptr, struct sImageTableEntry* tconfig, u32 arg2, s32 arg3, u32 ulst);
Mtxf* currentPlayerGetProjectionMatrixF(void);
void matrix_4x4_multiply(Mtxf* lhs, Mtxf* rhs, Mtxf* result);
Mtxf* camGetWorldToScreenMtxf(void);
void sub_GAME_7F097388(SkyRelated18* arg0, Mtxf* arg1, u16 arg2, f32 arg3, f32 arg4, SkyRelated38* arg5);
f32 skyClamp(f32 a, f32 b, f32 c);
Mtx* dynAllocateMatrix(void);
void /*Vtx?*/* dynAllocate7F0BD6C4(s32 count);
void skyChooseCloudVtxColour(SkyRelated18* arg0, f32 arg1);
Gfx* sub_GAME_7F097818(Gfx* gdl, SkyRelated38* arg1, SkyRelated38* arg2, SkyRelated38* arg3, f32 arg4, s32 textured);
Gfx* sub_GAME_7F09343C(Gfx*, s32);
void updateFrameCounters(s32 deltaFrames);
int sprintf_recomp(char* s, const char* fmt, ...);
u32 osGetCount_recomp(void);
void matrix_4x4_f32_to_s32(Mtxf* a, Mtxf* b);
void* dynAllocate(s32 size);
Gfx* sub_GAME_7F098A2C(Gfx* gdl, SkyRelated38* arg1, SkyRelated38* arg2, SkyRelated38* arg3, SkyRelated38* arg4,
                       f32 arg5);
Gfx* insert_sniper_sight_eye_intro(Gfx* gdl);
Gfx* insert_sight_backdrop_eye_intro(Gfx* gdl);
Gfx* insert_bond_eye_intro(Gfx* gdl);
s32 die_blood_image_routine(s32 arg0);
Gfx* sub_GAME_7F01CA18(Gfx* gdl);
Gfx* insert_imageDL(Gfx* gdl);
Gfx* sub_GAME_7F007E70(Gfx* gdl, u32 alpha);
void return_null(void);
Gfx* gunbarrelBloodOverlayDL(Gfx* gdl);
Gfx* manipulateGunbarrelAndLogoMatrices(Gfx* gdl);
void viShake(f32 param_1);

void viInitVideoSettings(void);
s16 viGetX(void);
s16 viGetY(void);
s16 viGetViewLeft(void);
s16 viGetViewTop(void);
s16 viGetViewWidth(void);
s16 viGetViewHeight(void);
u8* viGetFrameBuf2(void);
void viSetFrameBuf2(u8* buf);
void viSetFovY(f32 fovy);
f32 viGetFovY(void);
void viSetAspect(f32 aspect);
void viSetZRange(f32 near, f32 far);
void viSetUseZBuf(s32 usezbuf);
void viSetViewSize(s16 x, s16 y);
void viSetViewPosition(s16 left, s16 top);
void viInitBuffers(void);
void viVsyncRelated(void);
void viSetHorizontalOffset(s32 arg0);
s32 viGetHorizontalOffset(void);
void video_related_8(void);
void viSetBuf(s16 x, s16 y);
void viSetXY(s16 x, s16 y);
Gfx* viSetFillColor(Gfx* gdl, s32 r, s32 g, s32 b);
Gfx* viFillScreen(Gfx* gdl);
Gfx* viSetupScreensForNumPlayers(Gfx* gdl);

void indyGrabJpg16bit(void);
void indyGrabJpg32bit(void);
void indyGrabRgb16bit(void);
void indyGrabRgb32bit(void);

void viSetVideoMode(s32 m);
s32 viGet800232A0(void);
void viSet800232A0(s32 arg0);

Gfx* viClearZBufCurrentPlayer(Gfx* gdl);
Gfx* video_related_F(Gfx* gdl);
void viGetZRange(f32* zrange);
void set_cur_player_fovy(f32 fovy);
void bondviewFrozenMoveBond(s8 stick_x, s8 stick_y, u16 buttons, u16 oldbuttons);
void MoveBond(s8 stick_x, s8 stick_y, u16 buttons, u16 oldbuttons);
s32 lvlGetControlsLockedFlag(void);
bool currentPlayerIsFadeComplete(void);
void currentPlayerSetFadeColour(s32 r, s32 g, s32 b, f32 frac);
void currentPlayerSetFadeFrac(f32 maxfadetime, f32 frac);
void bossReturnTitleStage(void);
void bossRunTitleStage(void);
s32 currentPlayerEquipWeaponWrapper(GUNHAND hand, s32 next_weapon);
void sub_GAME_7F07B1A4(void);
SCREEN_RATIO_OPTION get_screen_ratio(void);
void set_cur_player_aspect(f32 aspect);
s16 bondviewGetCurrentPlayerViewportWidth(void);
s16 bondviewGetCurrentPlayerViewportHeight(void);
void set_cur_player_screen_size(u32 width, u32 height);
s16 bondviewGetCurrentPlayerViewportUly(void);
s16 getWidth320or440(void);
s16 getHeight330or240(void);
s16 get_curplayer_viewport_ulx(void);
void set_cur_player_viewport_size(u32 ulx, u32 uly);
void set_BONDdata_autoaim_y(s32 param_1);
void set_BONDdata_autoaim_x(s32 param_1);
void set_BONDdata_lookahead_setting(s32 arg0);
void gunSetGunAmmoVisible(s32 reason, s32 enable);
void currentPlayerUpdateColourScreenProperties(void);
void currentPlayerTickChrFade(void);
s32 cur_player_get_autoaim(void);
void gunSetSightVisible(s32 reason, s32 visible);
u32 cur_player_get_sight_onscreen_control(void);
u32 cur_player_get_ammo_onscreen_setting(void);
u32 cur_player_get_lookahead(void);
void sub_GAME_7F0D1A7C(void);
void obBlankResourcesLoadedInBank(u8 i);
void mempNullNextEntryInBank(u8 bank);
void stop_demo_playback(void);
void lvlUnloadStageTextData(void);
void eu_sub_7f0c00a4(void);
void speedgraphMarkerHandler(s32 arg0);
void memaSingleDefragPass(void);
void rspGfxTaskStart(Gfx *firstGdl, Gfx *gdl, s32 arg2, OSMesg rspReplyMsg);
void indycommHostSendDump(char *filename, u8 *data, u32 size);
s32 get_debug_taskgrab_val(void);
void video_related_8(void);
void dynSwapBuffers(void);
s32 dynGetFreeGfx2(Gfx *gdl);
void dynDrawMembars(Gfx *gdl);
void nullsub_41(s32 arg0);
void dynRemovedFunc(Gfx *gdl);
void memaDumpPrePostMerge(void);
void nulled_mempLoopAllMemBanks(void);
Gfx *debugmenuRender(Gfx *);
void debugmenuUpdate(void);
Gfx *speedgraphDisplayMetrics(Gfx *gdl);
s32 get_memusage_display_flag(void);
Gfx *debmenuDraw(Gfx *gdl);
s32 get_memusage_display_flag(void);
s32 get_debug_VisCVG_flag(void);
Gfx *lvlRender(Gfx *);
void lvlViewMoveTick(void);
void set_cur_player(s32 playernum);
s32 get_nth_player_from_shuffled(PLAYER_ID id);
void shuffle_player_ids(void);
void lvlManageMpGame(void);
s32 debug_menu_processor(s8 stick_h, s8 stick_v, u16 button_held, u16 button_pressed);
s8 joyGetStickX(s8 contpadnum);
s8 joyGetStickY(s8 contpadnum);
Gfx *dynGetMasterDisplayList(void);
void permit_stderr(u32 flag);
void joyConsumeSamplesWrapper(void);
void speedgraphRenderGraph(void);
void speedgraphMarkerCommit(void);
void waitForNextFrame(void);
void iterate_ramrom_entries_handle_camera_out(void);
s32 get_is_ramrom_flag(void);
void debmenuInit(void);
void lvlStageLoad(s32 stage);
void joyCheckStatusThreadSafe(void);
void dynInitMemory(void);
void init_player_data_ptrs_construct_viewports(int playercount);
s32 get_selected_num_players(void);
void reset_play_data_ptrs(void);
void *mempAllocBytesInBank(u32 bytes, u8 bank);
void memaReset(void *heapaddr, u32 heapsize);
const char *tokenFind(s32 index, const char *token);
void mempResetBank(u8 bank);
void tokenSetString(const char *str);
void randomSetSeed(u32 param_1);
void lvlSetSelectedDifficulty(DIFFICULTY arg0);
void set_selected_difficulty(DIFFICULTY difficulty);
void set_solo_and_ptr_briefing(LEVELID stage);
void fileSetCurrentFolder(u32 foldernum);
void fileValidateSaves(void);
void reset_mem_bank_5(void);
DIFFICULTY lvlGetSelectedDifficulty(void);
long int strtol(const char *nptr, char **endptr, int base);;
void test_if_recording_demos_this_stage_load(enum LEVELID arg0, enum DIFFICULTY arg1);
u8 *indycommHostCheckFileExists(char *name, s32 *size);
void frontChangeMenu(MENU menu, s32 reload);
s8 joyGetControllerCount(void);
void matrix_4x4_7F059694(Mtxf *arg0, f32 arg1, f32 arg2, f32 arg3, f32 arg4, f32 arg5, f32 arg6, f32 arg7, f32 arg8, f32 arg9);
void matrix_4x4_set_identity_and_position(struct coord3d *position, Mtxf *matrix);
void matrix_scalar_multiply(f32 scalar, f32 *matrix);
void matrix_4x4_multiply_in_place(Mtxf *lhs, Mtxf *rhs);
void matrix_4x4_copy(Mtxf *src, Mtxf *dst);
void disable_all_switches(Model *arg0);
void select_load_bond_picture(Model *objinstance, u32 bondID);
void set_item_visibility_in_objinstance(Model *objinstance, s32 item, s32 mode);
void toggle_deletion_menu_for_folder(int index);
void sub_GAME_7F03F90C(Model *model, f32 *arg1, f32 *arg2, f32 *arg3, f32 *arg4);
void sub_GAME_7F03F948(struct coord3d *arg0, struct coord2d *arg1, struct coord2d *arg2, struct coord2d *arg3, struct coord2d *arg4);
void setCursorPOSforMode(int mode);
void frontUpdateControlStickPosition(void);
ALSoundState *sndPlaySfx(struct ALBankAlt_s *soundBank, s16 soundIndex, ALSoundState *pendingState);
void fileCopyFolderToFirstFree(s32 foldernum);
void fileGetHighestStageDifficultyCompletedForFolder(s32 foldernum, LEVEL_SOLO_SEQUENCE *levelid, DIFFICULTY *difficulty);
void fileDeleteSaveForFolder(s32 foldernum);
u8 fileGetBondForFolder(u32 folder);
LEVEL_SOLO_SEQUENCE fileGetHighestStageUnlockedAnyFolder(void);
void replay_recorded_ramrom_at_address(ramromfilestructure *demofile);
u32 randomGetNext(void);

extern struct ramrom_struct ramrom_table[15];
extern struct rectbbox folder_option_ERASE_bound;
extern struct rectbbox folder_option_COPY_bound;
extern s32 folder_selection_screen_option_icon;
extern f32 cursor_v_pos;
extern f32 cursor_h_pos;
extern ALBank *g_musicSfxBufferPtr;
extern s32 folder_selected_for_deletion_choice;
extern s32 folder_selected_for_deletion;
extern s32 selected_folder_num_copy;
extern s32 selected_folder_num;
extern coord3d dword_CODE_bss_80069620[4];
extern struct Model *walletinst[4];
extern struct coord3d D_8002AB94[4];
extern s32 is_first_time_on_main_menu;
extern s32 is_first_time_on_legal_screen;
extern s32 g_MenuTimer;
extern OSScMsg g_bossGfxDoneMsg;
extern s32 g_DebugAndUpdateStageFlag;
extern struct memallocstring memallocstringtable[40];
extern u32 g_CurentMaMallocValue;
extern GFXMsg *localGfxFrameMsg;
extern OSMesgQueue gfxFrameMsgQ;
extern s32 g_BossIsDebugMenuOpen;
extern s32 g_ShowMemBarsFlag;
extern s32 g_ShowMemUseFlag;
extern s32 g_StageNum;
extern s32 g_MainStageNum;
extern enum CAMERAMODE g_CameraAfterCinema;
extern enum CAMERAMODE g_CameraMode;
extern enum CAMERAMODE camera_mode;
extern struct player_data* g_playerPerm;
extern s32 resolution;
extern OSViMode* viMode;
extern u32 g_viOriginalHstart;
extern u32 g_viOriginalVstart0;
extern u32 g_viOriginalVstart1;
extern Mtx* g_viProjectionMatrix;
extern s32 is_timer_active;
extern s32 mission_timer;
extern s32 watch_time_0;
extern s32 stop_time_flag;

/* SCREEN_HEIGHT #define changes based on version (PAL or NTSC) */
extern u8 cfb_16[NUM_VIDEO_FRAME_BUFFERS][SCREEN_WIDTH * SCREEN_HEIGHT * 2];
extern u32 intro_state_blood_animation;
extern Gfx dlBasicGeometry[4];
extern s32 intro_eye_counter;
extern struct sImageTableEntry* skywaterimages;
extern u32 D_8002A7D0;
extern u8 gunbarrel_mode;
extern f32 g_TitleX;
extern s16 word_CODE_bss_80069584;
extern f32 titleTransitionX;
extern Mtxf dword_CODE_bss_80079E98;
extern f32 g_SkyCloudOffset;
extern struct player* g_CurrentPlayer;
extern s32 cameraFrameCounter1;
extern s32 cameraFrameCounter2;
extern s32 cameraBufferToggle;
extern s32 g_ModelDistanceDisabled;
extern s32 z_buffer_height;
extern s32 z_buffer_width;
extern s32 z_buffer;
extern u8 sp_main[32768];
extern OSThread mainThread;
extern s32* stack_pointer;
extern s32 g_ModelDistanceDisabled;
extern u8* g_GfxBuffers[3];
extern u8 g_GfxActiveBufferIndex;
extern s32 g_GfxRequestedDisplayList;
extern VideoSettings* g_ViBackData;
extern s32 bgViewRelated[4];
extern s32 g_musicXTrack2CurrentTrackNum;
extern ALCSPlayer* g_musicXTrack2SeqPlayer;
extern s8 g_sndBootswitchSound;
extern s32 g_musicXTrack1CurrentTrackNum;
extern ALCSPlayer* g_musicXTrack1SeqPlayer;
extern u16 g_musicTrackLength[64];
extern u16 g_musicTrackCompressedLength[63];
extern u8* g_musicXTrack1SeqData;
extern RareALSeqBankFile* g_musicDataTable;
extern ALCSeq g_musicXTrack1Seq;
extern u8* g_musicXTrack2SeqData;
extern ALCSeq g_musicXTrack2Seq;
extern s32 g_musicXTrack3CurrentTrackNum;
extern ALCSPlayer* g_musicXTrack3SeqPlayer;
extern u8* g_musicXTrack3SeqData;
extern ALCSeq g_musicXTrack3Seq;
extern s32 g_ClockTimer;
extern s32 speedgraphframes;
extern s32 frameDelay;
extern u32 copy_of_osgetcount_value_1;

#endif
